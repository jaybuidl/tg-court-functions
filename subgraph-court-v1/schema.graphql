# KlerosLiquid entities
enum Period {
  "Evidence can be submitted. This is also when drawing has to take place."
  evidence,
  "Jurors commit a hashed vote. This is skipped for courts without hidden votes."
  commit,
  "Jurors reveal/cast their vote depending on whether the court has hidden votes or not."
  vote, 
  "The dispute can be appealed."
  appeal,
  "Tokens are redistributed and the ruling is executed."
  execution
}

type Draw @entity {
  id: String!
  address: Bytes! # address
  voteID: BigInt! # uint256
  index: BigInt! # uint256
  commited: Boolean
  voted: BigInt
  disputeID: Dispute! # String
  round: Round! # uint256
  blockNumber: BigInt!
}

type Round @entity {
  id: String!
  round: BigInt!
  active: Boolean!
}

type Arbitrable @entity(immutable: true) {
  id: Bytes!
  arbitrableHistories: [ArbitrableHistory!]! @derivedFrom(field: "arbitrable")
}

type ArbitrableHistory @entity(immutable: true) {
  id: String!
  arbitrable: Arbitrable! # address
  metaEvidence:  MetaEvidence!
}

type MetaEvidence @entity(immutable: true) {
  id: String!
  title: String
  description: String
  category: String
  question: String
  fileURI: String
  rulingOptions: [RulingOptions!] @derivedFrom(field: "metaEvidence")
}

type RulingOptions @entity(immutable: true) {
  id: String!
  metaEvidence: MetaEvidence!
  descriptions: [String!]!
  titles: [String!]!
}

type CourtCounter @entity {
  id: String!
  counter: BigInt!
}

type Court @entity {
  id: String!
  timesPerPeriod: [BigInt!]
  hiddenVotes: Boolean
  policy: String
  name: String
  description: String
  summary: String
  requiredSkills: String
}

type AppealNotification @entity {
  id: String!
  address: Bytes! # address
  index: BigInt! # uint256
  commited: Boolean
  voted: BigInt
  disputeID: Dispute! # String
  appealDeadline: BigInt! # uint256
  blockNumber: BigInt!
}

type Dispute @entity {
  id: String!
  currentRuling: BigInt! # uint256
  disputeID: BigInt! # uint256
  round: Round! # uint256
  metaEvidenceId: BigInt
  arbitrable: Arbitrable! # address
  arbitrableHistory: ArbitrableHistory # address
  period: Period! # uint8
  periodCommitIndex: BigInt # uint256
  periodVoteIndex: BigInt # uint256
  periodAppealIndex: BigInt # uint256
  periodDeadline: BigInt! # uint256
  subcourt: Court! # uint256
  lastPeriodChangeBlock: BigInt! # uint256
  lastPeriodChangeTimestamp: BigInt! # uint256
  draws: [Draw!]! @derivedFrom(field: "disputeID")
}

type AppealDecision @entity(immutable: true) {
  id: Bytes!
  disputeID: BigInt! # uint256
  arbitrable: Bytes! # address
  blockNumber: BigInt!
}